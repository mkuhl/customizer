name: CI

on:
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Python 3.12)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=template_customizer --cov-report=xml --cov-report=term-missing --cov-fail-under=50
        # TODO: Increase coverage threshold to 80% as we add more tests
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        
    - name: Run ruff linting
      run: |
        echo "::group::Ruff Linting"
        uv run ruff check src/
        echo "::endgroup::"
        
    - name: Check black formatting
      run: |
        echo "::group::Black Formatting Check"
        uv run black --check src/
        echo "::endgroup::"
        
    - name: Run mypy type checking
      run: |
        echo "::group::Mypy Type Checking"
        uv run mypy src/
        echo "::endgroup::"

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        ./scripts/docker-build.sh
        
    - name: Test Docker image - Version
      run: |
        docker run --rm template-customizer:latest version
        
    - name: Test Docker image - Help
      run: |
        docker run --rm template-customizer:latest --help
        
    - name: Test Docker image - Process dry-run
      run: |
        # Create test config for Docker test
        mkdir -p test-docker-template
        cat > test-docker-template/config.yml << 'EOF'
        project:
          name: "TestApp"
          version: "1.0.0"
        EOF
        
        cat > test-docker-template/test.py << 'EOF'
        # app_name = {{ values.project.name | quote }}
        app_name = "DefaultApp"
        EOF
        
        # Run the Docker container with the test template
        docker run --rm -v $PWD/test-docker-template:/workdir template-customizer:latest process --dry-run
        
    - name: Save Docker image as artifact
      run: |
        docker save template-customizer:latest | gzip > template-customizer.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: template-customizer.tar.gz

  docker-publish:
    name: Publish Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version and tags
      id: version
      run: |
        VERSION=$(uv run python scripts/get-version.py version)
        TAGS=$(uv run python scripts/get-version.py tags)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "📦 Version: $VERSION"
        echo "🏷️  Tags: $TAGS"
        
    - name: Build and push Docker image
      run: |
        # Set registry for build script
        export DOCKER_REGISTRY="ghcr.io/mkuhl/customizer"
        
        # Extract version and tags
        VERSION="${{ steps.version.outputs.version }}"
        TAGS="${{ steps.version.outputs.tags }}"
        
        echo "🐳 Building and pushing Docker image..."
        echo "📦 Version: $VERSION"
        echo "🏷️  Tags: $TAGS"
        
        # Build with GHCR registry
        docker build \
          -f docker/Dockerfile \
          --build-arg VERSION="$VERSION" \
          -t "ghcr.io/mkuhl/customizer:$VERSION" \
          .
        
        # Tag with additional tags and push all
        for tag in $TAGS; do
          if [ "$tag" != "$VERSION" ]; then
            echo "🏷️  Tagging as: ghcr.io/mkuhl/customizer:$tag"
            docker tag "ghcr.io/mkuhl/customizer:$VERSION" "ghcr.io/mkuhl/customizer:$tag"
          fi
          echo "⬆️  Pushing: ghcr.io/mkuhl/customizer:$tag"
          docker push "ghcr.io/mkuhl/customizer:$tag"
        done
        
        echo "✅ Published successfully!"
        echo "🌐 Available at: https://github.com/mkuhl/customizer/pkgs/container/customizer"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, quality, docker-publish]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Extract version from tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "📋 Tag: ${TAG_NAME}"
        echo "📦 Version: ${VERSION}"
        
    - name: Generate customizer script
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "🔧 Generating customizer script for version ${VERSION}"
        
        # Replace version placeholder in template
        sed "s/__VERSION__/${VERSION}/g" scripts/customizer.template > customizer
        chmod +x customizer
        
        # Verify the generated script
        echo "📋 Generated script preview:"
        head -20 customizer
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        cat > release_notes.md << EOF
        # Template Customizer v${VERSION}
        
        ## 🚀 Quick Start
        
        Download and run the Template Customizer with a single script:
        
        \`\`\`bash
        # Download the customizer script
        curl -L -o customizer https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/customizer
        chmod +x customizer
        
        # Use immediately
        ./customizer --help
        ./customizer process --dry-run
        \`\`\`
        
        ## 📦 What's Included
        
        - **\`customizer\`** - Standalone script that automatically pulls and runs \`ghcr.io/mkuhl/customizer:${VERSION}\`
        - **No installation required** - Just download, make executable, and run
        - **Docker-based** - Consistent environment across all platforms
        
        ## 🐳 Docker Images
        
        The following Docker images are available for this release:
        
        - \`ghcr.io/mkuhl/customizer:${VERSION}\` (specific version)
        - \`ghcr.io/mkuhl/customizer:latest\` (latest stable)
        
        \`\`\`bash
        # Run directly with Docker
        docker pull ghcr.io/mkuhl/customizer:${VERSION}
        docker run --rm -v \$PWD:/workdir ghcr.io/mkuhl/customizer:${VERSION} process --dry-run
        \`\`\`
        
        ## 📚 Documentation
        
        - **Usage Guide**: See [USAGE.md](https://github.com/mkuhl/customizer/blob/master/USAGE.md)
        - **Development**: See [CLAUDE.md](https://github.com/mkuhl/customizer/blob/master/CLAUDE.md)
        - **Repository**: https://github.com/mkuhl/customizer
        
        ## 🔧 Requirements
        
        - Docker installed and running
        - Internet connection for initial image download
        
        ---
        
        **Full Documentation**: https://github.com/mkuhl/customizer
        **Docker Images**: https://github.com/mkuhl/customizer/pkgs/container/customizer
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Template Customizer v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        files: |
          customizer