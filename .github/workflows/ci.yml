name: CI

on:
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Python 3.12)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=template_customizer --cov-report=xml --cov-report=term-missing --cov-fail-under=50
        # TODO: Increase coverage threshold to 80% as we add more tests
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        
    - name: Run ruff linting
      run: |
        echo "::group::Ruff Linting"
        uv run ruff check src/
        echo "::endgroup::"
        
    - name: Check black formatting
      run: |
        echo "::group::Black Formatting Check"
        uv run black --check src/
        echo "::endgroup::"
        
    - name: Run mypy type checking
      run: |
        echo "::group::Mypy Type Checking"
        uv run mypy src/
        echo "::endgroup::"

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        ./scripts/docker-build.sh
        
    - name: Test Docker image - Version
      run: |
        docker run --rm template-customizer:latest version
        
    - name: Test Docker image - Help
      run: |
        docker run --rm template-customizer:latest --help
        
    - name: Test Docker image - Process dry-run
      run: |
        # Create test config for Docker test
        mkdir -p test-docker-template
        cat > test-docker-template/config.yml << 'EOF'
        project:
          name: "TestApp"
          version: "1.0.0"
        EOF
        
        cat > test-docker-template/test.py << 'EOF'
        # app_name = {{ values.project.name | quote }}
        app_name = "DefaultApp"
        EOF
        
        # Run the Docker container with the test template
        docker run --rm -v $PWD/test-docker-template:/workdir template-customizer:latest process --dry-run
        
    - name: Save Docker image as artifact
      run: |
        docker save template-customizer:latest | gzip > template-customizer.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: template-customizer.tar.gz

  native-linux:
    name: Build Native Linux Binary
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        uv pip install --system pyinstaller

    - name: Build native executable
      run: |
        echo "🔨 Building native Linux executable..."
        pyinstaller \
          --clean \
          --distpath ./dist \
          --workpath ./build \
          template-customizer.spec
        
        echo "📦 Binary built successfully!"
        ls -lh dist/

    - name: Install UPX and compress
      run: |
        sudo apt-get update && sudo apt-get install -y upx
        echo "📦 Original size: $(du -h dist/customizer | cut -f1)"
        upx --best --lzma dist/customizer || true
        echo "📦 Compressed size: $(du -h dist/customizer | cut -f1)"

    - name: Test native binary
      run: |
        echo "🧪 Testing native binary..."
        
        # Version check
        ./dist/customizer --version
        
        # Help output
        ./dist/customizer --help
        
        # Info command
        ./dist/customizer info
        
        # Create test project
        mkdir -p test-template
        cat > test-template/config.py << 'EOF'
        # version = {{ values.version }}
        version = '1.0.0'
        # name = {{ values.name | quote }}
        name = 'default'
        EOF
        
        cat > config.yml << 'EOF'
        version: 2.0.0
        name: TestApp
        EOF
        
        # Test dry-run
        ./dist/customizer process \
          --project test-template \
          --config config.yml \
          --dry-run
        
        echo "✅ All tests passed!"

    - name: Generate checksums
      run: |
        cd dist
        sha256sum customizer > customizer.sha256
        echo "📋 Checksum: $(cat customizer.sha256)"

    - name: Create distribution archive
      run: |
        cd dist
        tar -czf customizer-linux-x64.tar.gz \
          customizer \
          customizer.sha256
        ls -lh *.tar.gz

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: customizer-linux-x64
        path: |
          dist/customizer
          dist/customizer.sha256
          dist/customizer-linux-x64.tar.gz

  docker-publish:
    name: Publish Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version and tags
      id: version
      run: |
        VERSION=$(uv run python scripts/get-version.py version)
        TAGS=$(uv run python scripts/get-version.py tags)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "📦 Version: $VERSION"
        echo "🏷️  Tags: $TAGS"
        
    - name: Build and push Docker image
      run: |
        # Set registry for build script
        export DOCKER_REGISTRY="ghcr.io/mkuhl/customizer"
        
        # Extract version and tags
        VERSION="${{ steps.version.outputs.version }}"
        TAGS="${{ steps.version.outputs.tags }}"
        
        echo "🐳 Building and pushing Docker image..."
        echo "📦 Version: $VERSION"
        echo "🏷️  Tags: $TAGS"
        
        # Build with GHCR registry
        docker build \
          -f docker/Dockerfile \
          --build-arg VERSION="$VERSION" \
          -t "ghcr.io/mkuhl/customizer:$VERSION" \
          .
        
        # Tag with additional tags and push all
        for tag in $TAGS; do
          if [ "$tag" != "$VERSION" ]; then
            echo "🏷️  Tagging as: ghcr.io/mkuhl/customizer:$tag"
            docker tag "ghcr.io/mkuhl/customizer:$VERSION" "ghcr.io/mkuhl/customizer:$tag"
          fi
          echo "⬆️  Pushing: ghcr.io/mkuhl/customizer:$tag"
          docker push "ghcr.io/mkuhl/customizer:$tag"
        done
        
        echo "✅ Published successfully!"
        echo "🌐 Available at: https://github.com/mkuhl/customizer/pkgs/container/customizer"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, quality, docker-publish, native-linux]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Extract version from tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "📋 Tag: ${TAG_NAME}"
        echo "📦 Version: ${VERSION}"
        
    - name: Download native binary artifact
      uses: actions/download-artifact@v4
      with:
        name: customizer-linux-x64
        path: ./native-binaries/

    - name: Prepare release assets
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Generate Docker wrapper script
        echo "🔧 Generating Docker wrapper script for version ${VERSION}"
        sed "s/__VERSION__/${VERSION}/g" scripts/run-docker-customizer.template > run-docker-customizer.sh
        chmod +x run-docker-customizer.sh
        
        # Verify the generated script
        echo "📋 Generated Docker wrapper preview:"
        head -20 run-docker-customizer.sh
        
        # Verify native binary
        echo "📦 Native binary contents:"
        ls -lh native-binaries/
        
        # Move and rename native binary for release
        mv native-binaries/customizer-linux-x64.tar.gz .
        
        # Generate combined checksums file
        echo "📋 Generating checksums..."
        sha256sum scripts/install.sh > checksums.txt
        sha256sum run-docker-customizer.sh >> checksums.txt
        sha256sum customizer-linux-x64.tar.gz >> checksums.txt
        cat checksums.txt
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        cat > release_notes.md << EOF
        # Template Customizer v${VERSION}
        
        ## 🚀 Quick Start
        
        ### 🚀 One-Liner Installation (Easiest!)
        
        Install Template Customizer with a single command:
        
        \`\`\`bash
        # Install to /usr/local/bin (requires sudo)
        curl -fsSL https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/install.sh | sh
        
        # Install to custom directory
        curl -fsSL https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/install.sh | sh -s -- --dir ~/.local/bin
        
        # Use immediately (startup time ~100ms)
        customizer --help
        customizer process --dry-run
        \`\`\`
        
        ### 💾 Manual Installation
        
        If you prefer manual installation:
        
        \`\`\`bash
        # Download and extract native binary
        curl -L https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/customizer-linux-x64.tar.gz | tar xz
        sudo mv customizer /usr/local/bin/
        \`\`\`
        
        ### 🐳 Docker Wrapper Script
        
        Use our Docker wrapper for cross-platform support when native binary isn't available:
        
        \`\`\`bash
        # Download the Docker wrapper script
        curl -L -o run-docker-customizer.sh https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/run-docker-customizer.sh
        chmod +x run-docker-customizer.sh
        
        # Use (startup time 2-3s)
        ./run-docker-customizer.sh --help
        ./run-docker-customizer.sh process --dry-run
        \`\`\`
        
        ## 📦 What's Included
        
        - **\`install.sh\`** - One-liner installation script for easy setup
        - **\`customizer-linux-x64.tar.gz\`** - Native Linux binary (x86_64) - fast startup (~100ms), no Docker needed!
        - **\`run-docker-customizer.sh\`** - Docker wrapper script that pulls and runs \`ghcr.io/mkuhl/customizer:${VERSION}\`
        - **\`checksums.txt\`** - SHA256 checksums for all release assets
        - **\`docs/ai-agents.md\`** - AI agent integration guide for automated workflows
        
        ## 🐳 Docker Images
        
        The following Docker images are available for this release:
        
        - \`ghcr.io/mkuhl/customizer:${VERSION}\` (specific version)
        - \`ghcr.io/mkuhl/customizer:latest\` (latest stable)
        
        \`\`\`bash
        # Run directly with Docker
        docker pull ghcr.io/mkuhl/customizer:${VERSION}
        docker run --rm -v \$PWD:/workdir ghcr.io/mkuhl/customizer:${VERSION} process --dry-run
        \`\`\`
        
        ## 📊 Performance Comparison
        
        | Method | Startup Time | Binary Size | Requirements |
        |--------|-------------|-------------|--------------|
        | Native Binary | ~100ms | ~40MB | Linux x86_64 |
        | Docker Wrapper | 2-3s | N/A | Docker |
        | Direct Docker | 2-3s | N/A | Docker |
        
        ## 📚 Documentation
        
        - **Usage Guide**: See [USAGE.md](https://github.com/mkuhl/customizer/blob/master/docs/USAGE.md)
        - **AI Agent Integration**: See [ai-agents.md](https://github.com/mkuhl/customizer/releases/download/${{ steps.version.outputs.tag }}/ai-agents.md) (included in release)
        - **Development**: See [CLAUDE.md](https://github.com/mkuhl/customizer/blob/master/CLAUDE.md)
        - **Repository**: https://github.com/mkuhl/customizer
        
        ## 🔧 Requirements
        
        ### For Native Binary:
        - Linux x86_64 (Ubuntu 20.04+, RHEL 8+, or compatible)
        - GLIBC 2.31 or newer
        
        ### For Docker Version:
        - Docker installed and running
        - Internet connection for initial image download
        
        ---
        
        **Full Documentation**: https://github.com/mkuhl/customizer
        **Docker Images**: https://github.com/mkuhl/customizer/pkgs/container/customizer
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Template Customizer v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        files: |
          scripts/install.sh
          run-docker-customizer.sh
          customizer-linux-x64.tar.gz
          checksums.txt
          docs/ai-agents.md